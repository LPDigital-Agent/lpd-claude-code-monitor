[build-system]
requires = ["setuptools>=61.0", "setuptools_scm>=8.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["dlq_monitor*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
dlq_monitor = [
    "config/*.yaml",
    "config/*.yml", 
    "docs/*.md",
    "templates/*.html",
    "templates/*.txt",
]
"*" = ["*.yaml", "*.json", "*.md"]

[project]
name = "lpd-claude-code-monitor"
version = "1.0.0"
authors = [
    {name = "Fabio Santos", email = "fabio.santos@example.com"},
]
description = "AWS SQS Dead Letter Queue Monitor with Claude AI auto-investigation capabilities"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]
keywords = ["aws", "sqs", "dlq", "monitoring", "claude", "ai", "investigation"]
dependencies = [
    "boto3>=1.34.0",
    "PyYAML>=6.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "dataclasses-json>=0.6.0",
    "requests>=2.31.0",
    "pygame>=2.5.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "coverage>=7.0",
    "pre-commit>=3.0",
    "build>=0.10",
    "twine>=4.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-asyncio>=0.21",
    "moto>=4.2",
]

[project.urls]
Homepage = "https://github.com/fabiosantos/lpd-claude-code-monitor"
Documentation = "https://github.com/fabiosantos/lpd-claude-code-monitor/docs"
Repository = "https://github.com/fabiosantos/lpd-claude-code-monitor.git"
"Bug Tracker" = "https://github.com/fabiosantos/lpd-claude-code-monitor/issues"

[project.scripts]
dlq-monitor = "dlq_monitor.cli:cli"
dlq-production = "dlq_monitor.utils.production_monitor:main"
dlq-limited = "dlq_monitor.utils.limited_monitor:main"
dlq-dashboard = "dlq_monitor.dashboards.enhanced:main"
dlq-ultimate = "dlq_monitor.dashboards.ultimate:main"
dlq-corrections = "dlq_monitor.dashboards.corrections:main"
dlq-fixed = "dlq_monitor.dashboards.fixed_enhanced:main"
dlq-live = "dlq_monitor.claude.live_monitor:main"
dlq-status = "dlq_monitor.claude.status_checker:main"
dlq-investigate = "dlq_monitor.claude.manual_investigation:main"
dlq-setup = "dlq_monitor.utils.github_setup:main"

# Black code formatter
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff linter
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] # Allow unused imports in __init__.py files

# MyPy type checker
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "pygame.*",
    "psutil.*",
    "dataclasses_json.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"